@{
	ViewBag.Title = Localizer["Exercise.Chords.Title"];
}

<div class="container mt-5">
	<div class="row justify-content-center exercise-content" style="display:none">
		<div class="col-md-8">
			<h2 class="text-center mb-4">@Localizer["Exercise.Chords.Title"]</h2>

			<div class="mb-4 text-center d-flex justify-content-center">
				<!-- Oitava e Tipo de Acorde -->
				<div class="mb-4 me-4">
					<label for="octaveRange" class="form-label">@Localizer["Exercise.SelectOctave"]</label>
					<select id="octaveRange" class="form-select">
						<option value="single">@Localizer["Exercise.Octave4"]</option>
						<option value="single3">@Localizer["Exercise.Octave3"]</option>
						<option value="full">@Localizer["Exercise.Full"]</option>
					</select>
				</div>

				<div class="mb-4">
					<label for="chordType" class="form-label">@Localizer["Exercise.TypeChord"]</label>
					<select id="chordType" class="form-select">
						<option value="major">@Localizer["Exercise.TypeChordMajeur"]</option>
						<option value="minor">@Localizer["Exercise.TypeChordMineur"]</option>
						<option value="both">@Localizer["Exercise.TypeChordMajeurMineur"]</option>
						<option value="all">@Localizer["Exercise.TypeChordAll"]</option>
					</select>
				</div>
			</div>

			<div class="mb-4 text-center">
				<button id="playChord" class="btn btn-primary me-3">@Localizer["Exercise.ListenChord"]</button>
				<button id="replayChord" class="btn btn-secondary">@Localizer["Exercise.RelistenChord"]</button>
			</div>

			<h4 class="text-center mb-3">@Localizer["Exercise.ChordsText"]</h4>

			<!-- Notas -->
			<div class="d-grid gap-2 d-md-flex justify-content-md-center">
				<button class="btn btn-outline-dark guessNote" data-note="C">C</button>
				<button class="btn btn-outline-dark guessNote" data-note="C#">C#</button>
				<button class="btn btn-outline-dark guessNote" data-note="D">D</button>
				<button class="btn btn-outline-dark guessNote" data-note="D#">D#</button>
				<button class="btn btn-outline-dark guessNote" data-note="E">E</button>
				<button class="btn btn-outline-dark guessNote" data-note="F">F</button>
				<button class="btn btn-outline-dark guessNote" data-note="F#">F#</button>
				<button class="btn btn-outline-dark guessNote" data-note="G">G</button>
				<button class="btn btn-outline-dark guessNote" data-note="G#">G#</button>
				<button class="btn btn-outline-dark guessNote" data-note="A">A</button>
				<button class="btn btn-outline-dark guessNote" data-note="A#">A#</button>
				<button class="btn btn-outline-dark guessNote" data-note="B">B</button>
			</div>

			<!-- Qualidade do Acorde -->
			<div class="d-grid gap-2 d-md-flex justify-content-md-center mt-3" id="guessQualityContainer">
				<button class="btn btn-outline-dark guessQuality" data-quality="major">@Localizer["Exercise.Major"]</button>
				<button class="btn btn-outline-dark guessQuality" data-quality="minor">@Localizer["Exercise.Minor"]</button>
				<button class="btn btn-outline-dark guessQuality" data-quality="7">@Localizer["Exercise.7"]</button>
				<button class="btn btn-outline-dark guessQuality" data-quality="9">@Localizer["Exercise.9"]</button>
			</div>
			<div class="d-grid gap-2 d-md-flex justify-content-md-center mt-3">
				<button id="validateGuess" class="btn btn-warning">@Localizer["Exercise.ValidationButton"]</button>
			</div>
		</div>
		<div class="scoreboard text-center my-4">
			<div class="d-inline-block mx-3">
				<h5>@Localizer["Exercise.CorrectAnswers"]</h5>
				<span id="correctCount">0</span>
			</div>
			<div class="d-inline-block mx-3">
				<h5>@Localizer["Exercise.ErrorAnswers"]</h5>
				<span id="errorCount">0</span>
			</div>
			<div class="d-inline-block mx-3">
				<h5>@Localizer["Exercise.BestScore"]</h5>
				<span id="bestScore">@ViewBag.BestScore</span>
			</div>
		</div>

	</div>
</div>

@section Scripts {
	<script>
		$(document).ready(function () {
			AcademiaAuditiva.init();
			Swal.fire({
				title: "@Localizer["Exercise.GuessChordsTitle"]",
				text: "@Localizer["Exercise.GuessChordsText"]",
				icon: 'info',
				confirmButtonText: "@Localizer["Exercise.StartButton"]",
				allowOutsideClick: false
			}).then((result) => {
				if (result.isConfirmed) {
					$('.exercise-content').show(); // Mostrando o conteúdo do exercício
				}
			});

			let randomChord = "";
			let allChords = "";
			let octaveRange = "single";
			let chordType = "major";

			// Inicialmente ocultar o guessQualityContainer
			const guessQualityContainer = document.getElementById('guessQualityContainer');
			guessQualityContainer.classList.add('hidden');

			function getRandomChord() {
				allChords = (octaveRange === "single")
					? AcademiaAuditiva.getAllChords(4)
					: (octaveRange === "single3")
					? AcademiaAuditiva.getAllChords(3)
					: AcademiaAuditiva.getAllNotes();

				const filteredChords = allChords.filter(chord => {
					if (chordType === "major") {
						return chord.type === "major";
					} else if (chordType === "minor") {
						return chord.type === "minor";
					} else if (chordType === "both") {
						return ["major", "minor"].includes(chord.type);
					} else {
						return true;
					}
				});

				const randomChordObj = filteredChords[Math.floor(Math.random() * filteredChords.length)];
				return { notes: randomChordObj.notes, type: randomChordObj.type };
			}

			document.getElementById('playChord').addEventListener('click', () => {
				const chordObj = getRandomChord();
				randomChord = `${chordObj.notes[0]}-${chordObj.type}`; // Para verificação posterior

				// Tocando o acorde inteiro
				AcademiaAuditiva.sampler.triggerAttackRelease(chordObj.notes, "1");
			});

			document.getElementById('replayChord').addEventListener('click', () => {
				if (randomChord) {
					const [note, quality] = randomChord.split('-');
					const chordNotes = allChords.find(chord => chord.type === quality && chord.notes[0] === note).notes;
					AcademiaAuditiva.sampler.triggerAttackRelease(chordNotes, "1");
				} else {
					alert('Primeiro clique em "Ouvir Acorde"');
				}
			});

			document.getElementById('octaveRange').addEventListener('change', (e) => {
				octaveRange = e.target.value;
			});

			document.getElementById('chordType').addEventListener('change', (e) => {
				chordType = e.target.value;
			});

			const noteButtons = document.querySelectorAll('.guessNote');
			const qualityButtons = document.querySelectorAll('.guessQuality');
			let guessedNote = '';
			let guessedQuality = '';

			noteButtons.forEach(button => {
				button.addEventListener('click', (e) => {
					// Remover a classe 'selected' de todos os botões de nota
					noteButtons.forEach(btn => btn.classList.remove('selected'));

					// Adicionar a classe 'selected' ao botão clicado
					e.target.classList.add('selected');

					guessedNote = e.target.getAttribute('data-note');

					e.stopImmediatePropagation();
				});
			});

			qualityButtons.forEach(button => {
				button.addEventListener('click', (e) => {
					// Remover a classe 'selected' de todos os botões de qualidade
					qualityButtons.forEach(btn => btn.classList.remove('selected'));

					// Adicionar a classe 'selected' ao botão clicado
					e.target.classList.add('selected');

					guessedQuality = e.target.getAttribute('data-quality');

					e.stopImmediatePropagation();
				});
			});;

			function checkGuess() {
				const correctCountEl = document.getElementById('correctCount');
				const errorCountEl = document.getElementById('errorCount');
				const bestScoreEl = document.getElementById('bestScore');


				randomChord = randomChord.replace(/\d+/g, '');
				if (chordType === "major") {
					guessedQuality = chordType
				} else if (chordType === "minor") {
					guessedQuality = chordType
				} else {
					//Do Nothing cause guessedQuality === guessedQuality
				}
				

				if (`${guessedNote}-${guessedQuality}` === randomChord) {
					correctCountEl.innerText = parseInt(correctCountEl.innerText) + 1;
					Swal.fire({
						icon: 'success',
						title: 'Correto!',
						text: 'Você acertou o acorde!'
					});
				} else {
					errorCountEl.innerText = parseInt(errorCountEl.innerText) + 1;
					const [correctNote, correctQuality] = randomChord.split('-');
					Swal.fire({
						icon: 'error',
						title: 'Errado!',
						text: `Você errou! O acorde correto era ${correctNote.replace('s', '#')} ${correctQuality}.`,
					});
				}

				//Clean
				randomChord = "";
				qualityButtons.forEach(btn => btn.classList.remove('selected'));
				noteButtons.forEach(btn => btn.classList.remove('selected'));

				// After showing the result, save the score on the server:
				const correctCount = parseInt(correctCountEl.innerText);
				const errorCount = parseInt(errorCountEl.innerText);
				let bestScore = parseInt(bestScoreEl.innerText);
				const currentScore = correctCount - errorCount;


				if (currentScore > bestScore) {
					bestScore = currentScore;
					bestScoreEl.innerText = bestScore;  // Atualiza o elemento HTML

					$.ajax({
						type: "POST",
						url: "/Exercise/GuessChordsSaveScore",
						data: { correctCount: correctCount, errorCount: errorCount },
						error: function () {
							console.error('Erro ao comunicar com o servidor. A pontuação não foi salva.');
						}
					});
				}
			}

			document.getElementById('validateGuess').addEventListener('click', () => {
				if (chordType === "major" || chordType === "minor" ) {
					if (guessedNote && randomChord) {
						checkGuess();
					} else {
						Swal.fire({
							icon: 'warning',
							title: 'Incompleto!',
							text: 'Por favor, selecione uma nota.'
						});
					}
				} else {
					if (guessedNote && guessedQuality && randomChord) {
						checkGuess();
					} else {
						Swal.fire({
							icon: 'warning',
							title: 'Incompleto!',
							text: 'Por favor, selecione uma nota e uma qualidade de acorde.'
						});
					}
				}
			});

			document.getElementById('chordType').addEventListener('change', (e) => {
				chordType = e.target.value;
				if (chordType === 'both' || chordType === 'all') {
					guessQualityContainer.classList.remove('hidden');
				} else {
					guessQualityContainer.classList.add('hidden');
				}
			});

		});
	</script>
}
