@model AcademiaAuditiva.ViewModels.ExerciseViewModel


<!-- Filtros -->
@await Html.PartialAsync("_ExerciseFilters", Model.Filters)

<!-- Corpo do exercício -->
<div class="row">
    <div class="col-lg-9">
        <div class="text-center mb-4">
            <button class="btn btn-primary me-2" id="playNote">@Localizer["Play"]</button>
            <button class="btn btn-secondary" id="replayNote">@Localizer["Replay"]</button>
        </div>

        <h4 class="text-center">@Localizer["Which note did you hear?"]</h4>
        <div class="d-grid gap-2 d-md-flex justify-content-md-center flex-wrap">
            @foreach (var note in Model.AnswerOptions)
            {
                <button class="btn btn-outline-dark guessNote" data-note="@note">@note.Replace("s", "#")</button>
            }
        </div>

        <div class="text-center mt-3">
            <button class="btn btn-success" id="validateGuess">@Localizer["Validate"]</button>
        </div>
    </div>

    <!-- Status lateral -->
    <div class="col-lg-3">
        @await Html.PartialAsync("_ExerciseSidebar", Model)
    </div>
</div>

<!-- Feedback -->
@await Html.PartialAsync("_Feedback", Model)


@section Scripts {
    <script>
        $(document).ready(function () {
            AcademiaAuditiva.init();

            Swal.fire({
                title: "@Localizer["Exercise.Note.Title"]",
                text: "@Localizer["Exercise.GuessNoteText"]",
                icon: 'info',
                confirmButtonText: "@Localizer["Exercise.StartButton"]",
                allowOutsideClick: false
            }).then((result) => {
                if (result.isConfirmed) {
                    $('.exercise-content').show();
                    exerciseStartTime = Date.now();
                }
            });

            let randomNote = "";
            let octaveRange = "single";
            let userGuessedNote = "";

            function getRandomNote() {
                const notes = (octaveRange === "single")
                    ? TheoryUtils.getAllNotes([4])
                    : TheoryUtils.getAllNotes([2, 3, 4, 5, 6]);
                return notes[Math.floor(Math.random() * notes.length)];
            }

            Tone.loaded().then(() => {
                document.getElementById('playNote').addEventListener('click', () => {
                    randomNote = getRandomNote();
                    AcademiaAuditiva.audio.playNote(randomNote, 1);
                });

                document.getElementById('replayNote').addEventListener('click', () => {
                    if (randomNote) {
                        AcademiaAuditiva.audio.playNote(randomNote, 1);
                    } else {
                        Swal.fire({
                            icon: 'warning',
                            title: '@Localizer["Exercise.NoteNotSelectedTitle"]',
                            text: '@Localizer["Exercise.NoteNotSelectedText"]'
                        });
                    }
                });


                document.getElementById('octaveRange').addEventListener('change', (e) => {
                    octaveRange = e.target.value;
                });
            });

            const guessButtons = document.querySelectorAll('.guessNote');
            guessButtons.forEach(button => {
                button.addEventListener('click', (e) => {
                    userGuessedNote = e.target.getAttribute('data-note');
                    guessButtons.forEach(btn => btn.classList.remove('selected-note'));
                    button.classList.add('selected-note');
                });
            });

            function checkGuess() {
                const correctCountEl = document.getElementById('correctCount');
                const errorCountEl = document.getElementById('errorCount');

                if (userGuessedNote === randomNote) {
                    correctCountEl.innerText = parseInt(correctCountEl.innerText) + 1;
                    AcademiaAuditiva.feedback.playSuccessSound('@Localizer["Exercise.CorrectMessage"]', '@Localizer["Exercise.CorrectMessageText"]');
                } else {
                    errorCountEl.innerText = parseInt(errorCountEl.innerText) + 1;
                    AcademiaAuditiva.feedback.playErrorSound('@Localizer["Exercise.WrongMessage"]', '@Localizer["Exercise.WrongNoteMessageText"]', randomNote);
                }

                // Reset
                randomNote = "";
                userGuessedNote = "";

                // Save score if better
                const correctCount = parseInt(correctCountEl.innerText);
                const errorCount = parseInt(errorCountEl.innerText);
                let bestScore = parseInt(document.getElementById('bestScore').innerText);
                const currentScore = correctCount - errorCount;

                $.post("/Exercise/GuessNoteSaveScore", {
                    correctCount: correctCount,
                    errorCount: errorCount,
                    timeSpentSeconds: Math.floor((Date.now() - exerciseStartTime) / 1000)
                });
            }

            document.getElementById('validateGuess').addEventListener('click', () => {
                if (userGuessedNote && randomNote) {
                    checkGuess();
                } else {
                    Swal.fire({
                        icon: 'warning',
                        title: '@Localizer["Exercise.IncompleteTitle"]',
                        text: '@Localizer["Exercise.SelectNoteText"]'
                    });
                }
            });
        });
    </script>
}