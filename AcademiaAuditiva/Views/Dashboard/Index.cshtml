@{
    ViewBag.Title = "Dashboard";
}

<div class="container mt-4">
    <h2 class="fw-bold">@Localizer["Dashboard.WelcomeMessage"] @User.Identity.Name!</h2>

    <!-- KPIs -->
    <div class="row row-cols-1 row-cols-md-3 g-4 my-3">
        <div class="col">
            <div class="card text-bg-light h-100 text-center p-3">
                <h6 class="text-uppercase">@Localizer["Dashboard.TotalExercises"]</h6>
                <h3 class="fw-bold">@ViewBag.TotalExercises</h3>
            </div>
        </div>
        <div class="col">
            <div class="card text-bg-light h-100 text-center p-3">
                <h6 class="text-uppercase">@Localizer["Dashboard.BestScore"]</h6>
                <h3 class="fw-bold">@ViewBag.BestScore</h3>
            </div>
        </div>
        <div class="col">
            <div class="card text-bg-light h-100 text-center p-3">
                <h6 class="text-uppercase">@Localizer["Dashboard.TotalTime"]</h6>
                <h3 class="fw-bold">@ViewBag.TotalTime min</h3>
            </div>
        </div>
    </div>

    <!-- Gráficos principais -->
    <div class="row row-cols-1 row-cols-md-2 g-4">
        <div class="col">
            <div class="card p-3 h-100">
                <h5 class="mb-2">@Localizer["Dashboard.LearningTimeline"]</h5>
                <canvas id="learningTimelineChart" height="120"></canvas>
            </div>
        </div>
        <div class="col">
            <div class="card p-3 h-100">
                <h5 class="mb-2">@Localizer["Dashboard.ByDifficulty"]</h5>
                <canvas id="difficultyChart" height="120"></canvas>
            </div>
        </div>
        <div class="col">
            <div class="card p-3 h-100">
                <h5 class="mb-2">@Localizer["Dashboard.TechnicalSkills"]</h5>
                <canvas id="radarTechnicalChart" height="180"></canvas>
            </div>
        </div>
        <div class="col">
            <div class="card p-3 h-100">
                <h5 class="mb-2">@Localizer["Dashboard.PedagogicalCategories"]</h5>
                <canvas id="radarCategoryChart" height="180"></canvas>
            </div>
        </div>
    </div>

    <!-- Histórico de sessões -->
    <div class="card mt-5 p-3">
        <h5>@Localizer["Dashboard.RecentSessions"]</h5>
        <div class="table-responsive mt-2">
            <table class="table table-sm table-striped">
                <thead>
                    <tr>
                        <th>@Localizer["Dashboard.Exercise"]</th>
                        <th>@Localizer["Dashboard.Date"]</th>
                        <th>@Localizer["Dashboard.Correct"]</th>
                        <th>@Localizer["Dashboard.Errors"]</th>
                        <th>@Localizer["Dashboard.TimeSpent"]</th>
                        <th>@Localizer["Dashboard.Score"]</th>
                    </tr>
                </thead>
                <tbody id="scoreHistoryTable"></tbody>
            </table>
        </div>
    </div>

    <!-- Dificuldades & Recomendações -->
    <div class="row row-cols-1 row-cols-md-2 g-4 mt-4">
        <div class="col">
            <div class="card p-3 h-100">
                <h5>@Localizer["Dashboard.MostMissedItems"]</h5>
                <ul class="list-group mt-2" id="mostMissedList"></ul>
            </div>
        </div>
        <div class="col">
            <div class="card p-3 h-100">
                <h5>@Localizer["Dashboard.Recommendations"]</h5>
                <div id="recommendationsList" class="list-group mt-2"></div>
            </div>
        </div>
    </div>
</div>

<div id="localizer"
     data-chart-progress="@Localizer["Dashboard.ChartProgress"]"
     data-chart-accuracy-by-skill="@Localizer["Dashboard.ChartAccuracyBySkill"]"
     data-chart-accuracy-by-category="@Localizer["Dashboard.ChartAccuracyByCategory"]"
     data-chart-accuracy-by-difficulty="@Localizer["Dashboard.ChartAccuracyByDifficulty"]"
     data-diff-Beginner="@Localizer["Exercise.Beginner"]"
     data-diff-Intermediate="@Localizer["Exercise.Intermediate"]"
     data-diff-Advanced="@Localizer["Exercise.Advanced"]"></div>
</div>


@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const loc = document.getElementById("localizer")?.dataset;

            // Timeline
            fetch("/Dashboard/GetUserTimeline")
                .then(res => res.json())
                .then(data => {
                    const ctx = document.getElementById("learningTimelineChart");
                    const labels = data.map(d => d.date);
                    const scores = data.map(d => d.score);

                    new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: labels,
                            datasets: [{
                                label: loc.chartProgress,
                                data: scores,
                                fill: false,
                                borderColor: 'rgb(75, 192, 192)',
                                tension: 0.2
                            }]
                        },
                        options: {
                            responsive: true,
                            scales: {
                                y: { beginAtZero: true }
                            }
                        }
                    });
                });

            // Radar técnico
            fetch("/Dashboard/GetUserProgress")
                .then(res => res.json())
                .then(data => {
                    const radarCtx = document.getElementById("radarTechnicalChart");
                    const labels = Object.keys(data.radar);
                    const values = Object.values(data.radar);

                    new Chart(radarCtx, {
                        type: 'radar',
                        data: {
                            labels: labels,
                            datasets: [{
                                label: loc.chartAccuracyBySkill,
                                data: values,
                                backgroundColor: 'rgba(54, 162, 235, 0.2)',
                                borderColor: 'rgba(54, 162, 235, 1)',
                                borderWidth: 1
                            }]
                        },
                        options: {
                            responsive: true,
                            scales: {
                                r: { min: 0, max: 100 }
                            }
                        }
                    });

                    const radarCat = document.getElementById("radarCategoryChart");
                    const catLabels = Object.keys(data.byCategory);
                    const catValues = Object.values(data.byCategory);

                    new Chart(radarCat, {
                        type: 'radar',
                        data: {
                            labels: catLabels,
                            datasets: [{
                                label: loc.chartAccuracyByCategory,
                                data: catValues,
                                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                                borderColor: 'rgba(255, 99, 132, 1)',
                                borderWidth: 1
                            }]
                        },
                        options: {
                            responsive: true,
                            scales: {
                                r: { min: 0, max: 100 }
                            }
                        }
                    });
                });

            // Histórico
            fetch("/Dashboard/GetScoreHistory")
                .then(res => res.json())
                .then(data => {
                    const tbody = document.getElementById("scoreHistoryTable");
                    data.forEach(row => {
                        const tr = document.createElement("tr");
                        tr.innerHTML = `
                                <td>${row.exercise}</td>
                                <td>${row.date}</td>
                                <td>${row.correct}</td>
                                <td>${row.error}</td>
                                <td>${row.timeSpent}</td>
                                <td>${row.score}</td>
                            `;
                        tbody.appendChild(tr);
                    });
                });

            // Dificuldade
            fetch("/Dashboard/GetPerformanceByDifficulty")
                .then(res => res.json())
                .then(data => {
                    const ctx = document.getElementById("difficultyChart");
                    const values = data.map(d => d.accuracy);

                    const labelMap = {
                        beginner: loc.diffBeginner,
                        intermediate: loc.diffIntermediate,
                        advanced: loc.diffAdvanced
                    };
                    const labels = data.map(d => labelMap[d.difficulty.toLowerCase()] ?? d.difficulty);

                    new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: labels,
                            datasets: [{
                                label: loc.chartAccuracyByDifficulty,
                                data: values,
                                backgroundColor: 'rgba(153, 102, 255, 0.6)',
                                borderColor: 'rgba(153, 102, 255, 1)',
                                borderWidth: 1
                            }]
                        },
                        options: {
                            responsive: true,
                            scales: {
                                y: { beginAtZero: true, max: 100 }
                            }
                        }
                    });
                });

            // Maiores dificuldades
            fetch("/Dashboard/GetMostMissedItems")
                .then(res => res.json())
                .then(data => {
                    const list = document.getElementById("mostMissedList");
                    data.forEach(item => {
                        const li = document.createElement("li");
                        li.classList.add("list-group-item", "d-flex", "justify-content-between", "align-items-center");
                        li.innerHTML = `${item.item} <span class="badge bg-danger">${item.errors}</span>`;
                        list.appendChild(li);
                    });
                });

            // Recomendações
            fetch("/Dashboard/GetRecommendations")
                .then(res => res.json())
                .then(data => {
                    const list = document.getElementById("recommendationsList");
                    data.forEach(msg => {
                        const div = document.createElement("div");
                        div.classList.add("list-group-item");
                        div.innerText = msg;
                        list.appendChild(div);
                    });
                });
        });
    </script>
}